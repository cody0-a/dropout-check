# Generated by Django 5.1.4 on 2025-01-27 12:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('image', models.ImageField(upload_to='images/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wereda_name', models.CharField(max_length=100)),
                ('street_name', models.CharField(default='Unknown', max_length=100)),
                ('city', models.CharField(default='Unknown', max_length=100)),
                ('state', models.CharField(default='Unknown', max_length=100)),
                ('region', models.CharField(max_length=64)),
                ('zone_id', models.CharField(max_length=64)),
                ('school_code', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('staff', 'Staff'), ('principal', 'Principal')], max_length=20)),
                ('sex', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('zip_code', models.CharField(blank=True, max_length=10)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField()),
                ('logo', models.ImageField(upload_to='school_logo')),
                ('motto', models.TextField()),
                ('about', models.TextField()),
                ('principal', models.CharField(max_length=100)),
                ('vice_principal', models.CharField(max_length=100)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.schooladdress')),
            ],
        ),
        migrations.AddField(
            model_name='schooladdress',
            name='SchoolName',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='school_name_address', to='account.schoolprofile'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=32)),
                ('roll_no', models.CharField(max_length=10)),
                ('batch', models.CharField(max_length=4)),
                ('section', models.CharField(max_length=1)),
                ('semester', models.IntegerField()),
                ('dropout', models.BooleanField(default=False)),
                ('dropout_reason', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='list_student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'permissions': [('can_add_student', 'Can add student'), ('can_change_student', 'Can change student'), ('can_delete_student', 'Can delete student'), ('can_view_student', 'Can view student')],
            },
        ),
        migrations.CreateModel(
            name='DropoutSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_dropout', models.BooleanField(default=True)),
                ('total_students', models.IntegerField(default=0)),
                ('total_dropouts', models.IntegerField(default=0)),
                ('academic_dropouts', models.IntegerField(default=0)),
                ('financial_dropouts', models.IntegerField(default=0)),
                ('health_dropouts', models.IntegerField(default=0)),
                ('personal_dropouts', models.IntegerField(default=0)),
                ('marriage_dropouts', models.IntegerField(default=0)),
                ('distance_dropouts', models.IntegerField(default=0)),
                ('death_dropouts', models.IntegerField(default=0)),
                ('other_dropouts', models.IntegerField(default=0)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dropout_summary', to='account.student')),
            ],
        ),
        migrations.CreateModel(
            name='DropOut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dropout_reason', models.CharField(choices=[('Academic', 'Academic'), ('Financial', 'Financial'), ('Health', 'Health'), ('Personal', 'Personal'), ('Marriage', 'Marriage'), ('Distance', 'Distance'), ('Death', 'Death'), ('Other', 'Other')], max_length=100)),
                ('year', models.DateTimeField(auto_now=True)),
                ('semester', models.CharField(choices=[('1st Semester', '1st Semester'), ('2nd Semester', '2nd Semester')], max_length=32)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dropout_student', to='account.student')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('designation', models.CharField(max_length=100)),
                ('qualification', models.TextField()),
                ('experience', models.TextField()),
                ('date_of_join', models.DateTimeField(auto_now=True)),
                ('profile_pic', models.ImageField(upload_to='teacher_profile')),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('date_of_birth', models.DateTimeField()),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.schoolprofile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
